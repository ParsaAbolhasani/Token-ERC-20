// SPDX-License-Identifier: MIT
pragma solidity >=0.7.0 <0.9.0;

contract solidity_dev_community{
    string public _name;
    string public _symbol;
    uint8 public _decimal; 
    uint256 public _totalSupply; // totalsupply = token*(10**decimal)  1000*(10**5) = 1000*100000 = 100000000

    mapping(address => uint256) balances;
    mapping(address => mapping(address => uint256)) allowed;

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender,uint256 _value);

    constructor(){
        _name = "Parsa Solidity Test";
        _symbol = "PST";
        _decimal = 5;
        _totalSupply = 100000000;
        balances[msg.sender] = _totalSupply;
    }

    function name() public view returns(string memory){
        return _name;
    }

    function synbol() public view returns (string memory){
        return _symbol;
    }

    function decimal() public view returns (uint8){
        return _decimal;
    }

    function totalSupply() public view returns (uint256){
        return _totalSupply;
    }

    function balancesOf(address _account) public view returns (uint256){
        return balances[_account];
    }

    function allowance(address _owner, address _spender) public view returns (uint256){
        return allowed[_owner][_spender];
    }

    function approve(address _spender, uint256 _value) public returns(bool){
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function transfer(address _to, uint256 _amount) public returns(bool){
        require(_amount <= balances[msg.sender]);
        balances[msg.sender] -= _amount;
        balances[_to] += _amount;
        emit Transfer(msg.sender,_to, _amount);
        return true;
    }

    function transferFrom(address _from,address _to, uint256 _amount) public returns(bool){
        require(_amount <= balances[_from]);
        require(_amount <= allowed[_from][msg.sender]);

        balances[_from] -= _amount;
        allowed[_from][msg.sender] -= _amount;
        balances[_to] += _amount;

        emit Transfer(_from,_to, _amount);
        return true;
    }
}
